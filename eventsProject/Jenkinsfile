pipeline {
    agent any

    environment {
        GIT_REPO = 'https://github.com/medazizarbi/event_repo_5sim2.git' // Replace with your Git repository URL
        BRANCH = 'med_aziz_el_arbi' // Replace with the branch you want to build
        SONAR_HOST_URL = 'http://192.168.33.10:9000' // Replace with your SonarQube server URL
        SONAR_TOKEN = credentials('jenkins-sonar')
        NEXUS_REPO_URL = 'http://192.168.33.10:8081'
        DOCKER_IMAGE = 'medazizelarbi/events-project:1.0.0'

    }

    stages {
        stage('Checkout Code') {
            steps {
                echo "Cloning the repository from Git..."
                git branch: "${BRANCH}", url: "${GIT_REPO}"
            }
        }

        stage('Compile Project') {
            steps {
                echo "Compiling the project using Maven..."
                dir('eventsProject')  { // Navigate to the 'eventsProject' directory
                    sh 'mvn clean compile'
                }
            }
        }

        stage('Run Unit Tests') {
            steps {
                echo "Running unit tests with Maven (including Mockito tests)..."
                dir('eventsProject') { // Navigate to the 'eventsProject' directory
                    sh 'mvn test'
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                echo "Running SonarQube analysis..."
                dir('eventsProject') { // Navigate to the 'eventsProject' directory
                    sh """
                    mvn sonar:sonar \
                    -Dsonar.projectKey=eventsProject-key \
                    -Dsonar.host.url=${SONAR_HOST_URL} \
                    -Dsonar.token=${SONAR_TOKEN} \
                    -Dsonar.java.binaries=target/classes
                    """
                }
            }
        }

        stage('Package Application') {
            steps {
                echo "Packaging the application into a JAR/WAR file..."
                dir('eventsProject') { // Navigate to the 'eventsProject' directory
                    sh 'mvn package'
                }
            }
        }
        stage('Deploy to Nexus') {
         steps { echo "Deploying the artifact to Nexus..."
         dir('eventsProject') {
         withCredentials([usernamePassword(credentialsId: 'nexus-cred', passwordVariable: 'NEXUS_PASSWORD', usernameVariable: 'NEXUS_USERNAME')]) {
          sh 'mvn deploy -DaltDeploymentRepository=nexus::default::${NEXUS_REPO_URL}'
          } } } }


        stage('Build Docker Image') {
            steps {
                echo "Building Docker Image..."
                sh 'docker build -t ${DOCKER_IMAGE} .'
            }
        }

        stage('Push Docker Image') {
            steps {
                echo "Pushing Docker Image to Docker Hub..."
                withCredentials([usernamePassword(credentialsId: 'dockerhub-cred', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh """
                    docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
                    docker push ${DOCKER_IMAGE}
                    """
                }
            }
        }

        stage('Run Docker Compose') {
            steps {
                echo "Launching services with Docker Compose..."
                sh 'docker compose up -d'
            }
        }
    }


}



    post {
        success {
            echo "Pipeline completed successfully!"
        }
        failure {
            echo "Pipeline failed. Check the logs for details."
        }
    }
}
